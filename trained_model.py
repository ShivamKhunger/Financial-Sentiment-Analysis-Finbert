# -*- coding: utf-8 -*-
"""Trained_Model.ipynb

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1aqts7Po0xRzCcyJY6vxZmi14dIpXBJyy
"""

import tensorflow as tf
from transformers import pipeline, AutoTokenizer, TFAutoModelForSequenceClassification
import pandas as pd
import numpy as np
from sklearn.model_selection import train_test_split
from sklearn.metrics import classification_report
import gc

sentiment_pipeline = pipeline("text-classification", model="ProsusAI/finbert")

df = pd.read_csv("financial_news_preprocessed.csv").dropna(subset=["preprocessed_content"])
df["sentiment"] = df["preprocessed_content"].apply(lambda x: sentiment_pipeline(x[:256])[0]["label"])

label_map = {"negative": 0, "neutral": 1, "positive": 2}
df["sentiment"] = df["sentiment"].map(label_map)
df.to_csv("financial_news_labeled.csv", index=False)

train_texts, val_texts, train_labels, val_labels = train_test_split(
    df["preprocessed_content"].astype(str), df["sentiment"], test_size=0.2, random_state=42
)

tokenizer = AutoTokenizer.from_pretrained("ProsusAI/finbert")

train_encodings = tokenizer(list(train_texts), truncation=True, padding="max_length", max_length=256, return_tensors="tf")
val_encodings = tokenizer(list(val_texts), truncation=True, padding="max_length", max_length=256, return_tensors="tf")

train_dataset = tf.data.Dataset.from_tensor_slices((dict(train_encodings), tf.convert_to_tensor(train_labels))).batch(16)
val_dataset = tf.data.Dataset.from_tensor_slices((dict(val_encodings), tf.convert_to_tensor(val_labels))).batch(16)

gc.collect()
tf.keras.backend.clear_session()

model = TFAutoModelForSequenceClassification.from_pretrained("ProsusAI/finbert", num_labels=3)

model.compile(
    optimizer=tf.keras.optimizers.Adam(learning_rate=2e-5),
    loss=tf.keras.losses.SparseCategoricalCrossentropy(from_logits=True),
    metrics=["accuracy"]
)

history = model.fit(
    train_dataset,
    validation_data=val_dataset,
    epochs=5,
)

preds = model.predict(val_dataset).logits
preds = np.argmax(preds, axis=1)

print(classification_report(val_labels, preds, target_names=["Negative", "Neutral", "Positive"]))